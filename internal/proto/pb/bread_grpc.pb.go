// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: internal/proto/bread.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BreadClient is the client API for Bread service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BreadClient interface {
	Save(ctx context.Context, in *SaveBreadReq, opts ...grpc.CallOption) (*CommonOneResp, error)
	QueryAll(ctx context.Context, in *QueryAllBreadReq, opts ...grpc.CallOption) (*CommonManyResp, error)
	Query(ctx context.Context, in *QueryBreadReq, opts ...grpc.CallOption) (*CommonOneResp, error)
}

type breadClient struct {
	cc grpc.ClientConnInterface
}

func NewBreadClient(cc grpc.ClientConnInterface) BreadClient {
	return &breadClient{cc}
}

func (c *breadClient) Save(ctx context.Context, in *SaveBreadReq, opts ...grpc.CallOption) (*CommonOneResp, error) {
	out := new(CommonOneResp)
	err := c.cc.Invoke(ctx, "/bread.Bread/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *breadClient) QueryAll(ctx context.Context, in *QueryAllBreadReq, opts ...grpc.CallOption) (*CommonManyResp, error) {
	out := new(CommonManyResp)
	err := c.cc.Invoke(ctx, "/bread.Bread/QueryAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *breadClient) Query(ctx context.Context, in *QueryBreadReq, opts ...grpc.CallOption) (*CommonOneResp, error) {
	out := new(CommonOneResp)
	err := c.cc.Invoke(ctx, "/bread.Bread/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BreadServer is the server API for Bread service.
// All implementations must embed UnimplementedBreadServer
// for forward compatibility
type BreadServer interface {
	Save(context.Context, *SaveBreadReq) (*CommonOneResp, error)
	QueryAll(context.Context, *QueryAllBreadReq) (*CommonManyResp, error)
	Query(context.Context, *QueryBreadReq) (*CommonOneResp, error)
	mustEmbedUnimplementedBreadServer()
}

// UnimplementedBreadServer must be embedded to have forward compatible implementations.
type UnimplementedBreadServer struct {
}

func (UnimplementedBreadServer) Save(context.Context, *SaveBreadReq) (*CommonOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedBreadServer) QueryAll(context.Context, *QueryAllBreadReq) (*CommonManyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAll not implemented")
}
func (UnimplementedBreadServer) Query(context.Context, *QueryBreadReq) (*CommonOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedBreadServer) mustEmbedUnimplementedBreadServer() {}

// UnsafeBreadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BreadServer will
// result in compilation errors.
type UnsafeBreadServer interface {
	mustEmbedUnimplementedBreadServer()
}

func RegisterBreadServer(s grpc.ServiceRegistrar, srv BreadServer) {
	s.RegisterService(&Bread_ServiceDesc, srv)
}

func _Bread_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBreadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BreadServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Bread/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BreadServer).Save(ctx, req.(*SaveBreadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bread_QueryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBreadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BreadServer).QueryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Bread/QueryAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BreadServer).QueryAll(ctx, req.(*QueryAllBreadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bread_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBreadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BreadServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Bread/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BreadServer).Query(ctx, req.(*QueryBreadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Bread_ServiceDesc is the grpc.ServiceDesc for Bread service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bread_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bread.Bread",
	HandlerType: (*BreadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _Bread_Save_Handler,
		},
		{
			MethodName: "QueryAll",
			Handler:    _Bread_QueryAll_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Bread_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/bread.proto",
}
